{
  "openapi": "3.0.3",
  "info": {
    "title": "VPN Gateway API",
    "description": "A simple API to manage tunnel entries on a dedicated host within the edges. The VPN Gateway is used to encrypt traffic before it enters the first black network.",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "{protocol}://{apiRoot}/v1",
      "variables": {
        "protocol": {
          "enum": ["http", "https"],
          "default": "http"
        },
        "apiRoot": {
          "default": "localhost:8083",
          "description": "The server to use"
        }
      }
    }
  ],
  "components": {
    "schemas": {
      "tunnel_entry": {
        "type": "object",
        "properties": {
          "tunnel_entry_id": {
            "type": "integer",
            "format": "int32",
            "description": "The tunnel identifier",
            "example": 1
          },
          "inner_subnet": {
            "type": "string",
            "description": "The subnet to route towards the inner interface (aka. the edge network/device)",
            "example": "192.168.178.0/24"
          },
          "local_port": {
            "type": "integer",
            "format": "uint16",
            "description": "The local port to use to bind the tunnel",
            "example": 7543
          },
          "remote_end": {
            "type": "string",
            "description": "The remote address to contact as the other side of the tunnel",
            "example": "vpn2"
          },
          "private_key": {
            "type": "string",
            "description": "The private key to use for authentication of the tunnel to the other side",
            "example": "SSBhbSBhIHZlcnkgc2VjcmV0IGtleQ=="
          },
          "public_key": {
            "type": "string",
            "description": "The public key to use for authentication of the tunnel from the other side",
            "example": "SSBjb3VsZCBiZSBhIHB1YmxpYyBrZXk="
          },
          "local_tunnel_ip": {
            "type": "string",
            "description": "The ip of the local wireguard tunnel end device",
            "example": "10.0.1.3"
          },
          "remote_tunnel_ip": {
            "type": "string",
            "description": "The ip of the remote wireguard tunnel end device",
            "example": "10.0.1.4"
          },
          "ingress_matches": {
            "type": "array",
            "description": "A specification for which mpls labels (slice ids) to match, alongside their expected ingress port",
            "items": {
              "type": "object",
              "description": "A match entry specifying packets that should be routed through the tunnel",
              "properties": {
                "intf_name": {
                  "type": "string",
                  "description": "Specifies the ingress interface",
                  "example": "intf1"
                },
                "slice_id": {
                  "type": "integer",
                  "description": "Specifies the expected mpls label",
                  "example": 1
                }
              }
            }
          },
          "egress_matches": {
            "type": "array",
            "description": "A specification for which mpls labels (slice ids) to match, alongside their supposed egress port",
            "items": {
              "type": "object",
              "description": "A match entry specifying packets that should be routed to their destination",
              "properties": {
                "intf_name": {
                  "type": "string",
                  "description": "Specifies the egress interface",
                  "example": "intf1"
                },
                "slice_id": {
                  "type": "integer",
                  "description": "Specifies the expected mpls label",
                  "example": 2
                }
              }
            }
          }
        }
      }
    }
  },
  "paths": {
    "/auth": {
      "summary": "Manages authentication towards this service",
      "description": "Endpoint to manage authentication tokens",
      "post": {
        "tags": ["Authentication"],
        "description": "Issues a new authentication token in exchange for credentials. Currently requires no credentials, this is up to future implementations.",
        "parameters": [
        ],
        "responses": {
          "200": {
            "description": "The authentication token as string",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Wrong credentials were specified"
          }
        }
      }
    },
    "/tunnel_entry": {
      "summary": "Manages tunnel entries on the vpn gateway",
      "description": "Endpoint to manage tunnel entries",
      "get": {
        "tags": [
          "Tunnel Entry Management"
        ],
        "description": "Lists all current tunnel entries",
        "parameters": [
          {
            "name": "auth",
            "in": "query",
            "description": "The authentication token issued by prior login",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The current list of tunnel entries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/tunnel_entry"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Invalid authentication provided"
          }
        }
      },
      "put": {
        "tags": [
          "Tunnel Entry Management"
        ],
        "description": "Creates a new tunnel entry or updates one. Only updating of match entries is allowed - not the rest of the tunnel parameters.",
        "parameters": [
          {
            "name": "auth",
            "in": "query",
            "description": "The authentication token issued by prior login",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The tunnel entry to create or update. The id will be inherited from the request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tunnel_entry"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The tunnel entry has been created"
          },
          "202": {
            "description": "The tunnel entry has been updated"
          },
          "400": {
            "description": "No body provided."
          },
          "403": {
            "description": "Invalid authentication provided."
          },
          "404": {
            "description": "A specified interface could not be found"
          },
          "406": {
            "description": "A value exceeds the allowed range"
          },
          "409": {
            "description": "A tunnel entry with this id already exists and information apart from match entries was changed."
          },
          "412": {
            "description": "A value does not match the schema"
          },
          "507": {
            "description": "Already too many tunnel entries in use"
          }
        }
      },
      "delete": {
        "tags": [
          "Tunnel Entry Management"
        ],
        "description": "Deletes a tunnel entry",
        "parameters": [
          {
            "name": "auth",
            "in": "query",
            "description": "The authentication token issued by prior login",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tunnel_entry_id",
            "in": "query",
            "description": "The id of the tunnel entry to be deleted.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The tunnel entry was successfully deleted."
          },
          "403": {
            "description": "Invalid authentication provided."
          },
          "404": {
            "description": "The tunnel entry could not be found."
          }
        }
      }
    }
  }
}
