# coding: utf-8

"""
    Controller

    The API used by the DSMF/DTMF to contact the controller. This API is a subset of the API provided by the ryu controller and modelled strictly according to their specification. Currently we only support OpenFlow 1.2 or higher. Please refer to the specification here: <a href=\"https://ryu.readthedocs.io/en/latest/app/ofctl_rest.html\">https://ryu.readthedocs.io/en/latest/app/ofctl_rest.html</a>  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from controller_client import schemas  # noqa: F401


class SwitchDescription(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A switch description
    """


    class MetaOapg:
        
        class properties:
            mfr_desc = schemas.StrSchema
            hw_desc = schemas.StrSchema
            sw_desc = schemas.StrSchema
            serial_num = schemas.StrSchema
            dp_desc = schemas.StrSchema
            __annotations__ = {
                "mfr_desc": mfr_desc,
                "hw_desc": hw_desc,
                "sw_desc": sw_desc,
                "serial_num": serial_num,
                "dp_desc": dp_desc,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mfr_desc"]) -> MetaOapg.properties.mfr_desc: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hw_desc"]) -> MetaOapg.properties.hw_desc: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sw_desc"]) -> MetaOapg.properties.sw_desc: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["serial_num"]) -> MetaOapg.properties.serial_num: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dp_desc"]) -> MetaOapg.properties.dp_desc: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["mfr_desc", "hw_desc", "sw_desc", "serial_num", "dp_desc", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mfr_desc"]) -> typing.Union[MetaOapg.properties.mfr_desc, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hw_desc"]) -> typing.Union[MetaOapg.properties.hw_desc, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sw_desc"]) -> typing.Union[MetaOapg.properties.sw_desc, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["serial_num"]) -> typing.Union[MetaOapg.properties.serial_num, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dp_desc"]) -> typing.Union[MetaOapg.properties.dp_desc, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["mfr_desc", "hw_desc", "sw_desc", "serial_num", "dp_desc", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        mfr_desc: typing.Union[MetaOapg.properties.mfr_desc, str, schemas.Unset] = schemas.unset,
        hw_desc: typing.Union[MetaOapg.properties.hw_desc, str, schemas.Unset] = schemas.unset,
        sw_desc: typing.Union[MetaOapg.properties.sw_desc, str, schemas.Unset] = schemas.unset,
        serial_num: typing.Union[MetaOapg.properties.serial_num, str, schemas.Unset] = schemas.unset,
        dp_desc: typing.Union[MetaOapg.properties.dp_desc, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SwitchDescription':
        return super().__new__(
            cls,
            *_args,
            mfr_desc=mfr_desc,
            hw_desc=hw_desc,
            sw_desc=sw_desc,
            serial_num=serial_num,
            dp_desc=dp_desc,
            _configuration=_configuration,
            **kwargs,
        )
