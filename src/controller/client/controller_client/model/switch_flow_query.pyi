# coding: utf-8

"""
    Controller

    The API used by the DSMF/DTMF to contact the controller. This API is a subset of the API provided by the ryu controller and modelled strictly according to their specification. Currently we only support OpenFlow 1.2 or higher. Please refer to the specification here: <a href=\"https://ryu.readthedocs.io/en/latest/app/ofctl_rest.html\">https://ryu.readthedocs.io/en/latest/app/ofctl_rest.html</a>  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from controller_client import schemas  # noqa: F401


class SwitchFlowQuery(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A switch flow query
    """


    class MetaOapg:
        
        class properties:
            table_id = schemas.IntSchema
            out_port = schemas.IntSchema
            out_group = schemas.IntSchema
            cookie = schemas.IntSchema
            cookie_mask = schemas.IntSchema
        
            @staticmethod
            def match() -> typing.Type['SwitchFlowMatchV12']:
                return SwitchFlowMatchV12
            priority = schemas.IntSchema
            __annotations__ = {
                "table_id": table_id,
                "out_port": out_port,
                "out_group": out_group,
                "cookie": cookie,
                "cookie_mask": cookie_mask,
                "match": match,
                "priority": priority,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["table_id"]) -> MetaOapg.properties.table_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["out_port"]) -> MetaOapg.properties.out_port: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["out_group"]) -> MetaOapg.properties.out_group: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cookie"]) -> MetaOapg.properties.cookie: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cookie_mask"]) -> MetaOapg.properties.cookie_mask: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["match"]) -> 'SwitchFlowMatchV12': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["priority"]) -> MetaOapg.properties.priority: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["table_id", "out_port", "out_group", "cookie", "cookie_mask", "match", "priority", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["table_id"]) -> typing.Union[MetaOapg.properties.table_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["out_port"]) -> typing.Union[MetaOapg.properties.out_port, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["out_group"]) -> typing.Union[MetaOapg.properties.out_group, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cookie"]) -> typing.Union[MetaOapg.properties.cookie, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cookie_mask"]) -> typing.Union[MetaOapg.properties.cookie_mask, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["match"]) -> typing.Union['SwitchFlowMatchV12', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["priority"]) -> typing.Union[MetaOapg.properties.priority, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["table_id", "out_port", "out_group", "cookie", "cookie_mask", "match", "priority", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        table_id: typing.Union[MetaOapg.properties.table_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        out_port: typing.Union[MetaOapg.properties.out_port, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        out_group: typing.Union[MetaOapg.properties.out_group, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        cookie: typing.Union[MetaOapg.properties.cookie, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        cookie_mask: typing.Union[MetaOapg.properties.cookie_mask, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        match: typing.Union['SwitchFlowMatchV12', schemas.Unset] = schemas.unset,
        priority: typing.Union[MetaOapg.properties.priority, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SwitchFlowQuery':
        return super().__new__(
            cls,
            *_args,
            table_id=table_id,
            out_port=out_port,
            out_group=out_group,
            cookie=cookie,
            cookie_mask=cookie_mask,
            match=match,
            priority=priority,
            _configuration=_configuration,
            **kwargs,
        )

from controller_client.model.switch_flow_match_v12 import SwitchFlowMatchV12
