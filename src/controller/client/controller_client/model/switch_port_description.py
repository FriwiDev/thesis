# coding: utf-8

"""
    Controller

    The API used by the DSMF/DTMF to contact the controller. This API is a subset of the API provided by the ryu controller and modelled strictly according to their specification. Currently we only support OpenFlow 1.2 or higher. Please refer to the specification here: <a href=\"https://ryu.readthedocs.io/en/latest/app/ofctl_rest.html\">https://ryu.readthedocs.io/en/latest/app/ofctl_rest.html</a>  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from controller_client import schemas  # noqa: F401


class SwitchPortDescription(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Switch port description
    """


    class MetaOapg:
        
        class properties:
            port_no = schemas.IntSchema
            hw_addr = schemas.StrSchema
            name = schemas.StrSchema
            config = schemas.IntSchema
            state = schemas.IntSchema
            curr = schemas.IntSchema
            advertised = schemas.IntSchema
            supported = schemas.IntSchema
            peer = schemas.IntSchema
            curr_speed = schemas.IntSchema
            max_speed = schemas.IntSchema
            length = schemas.IntSchema
            
            
            class properties(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            additional_properties = schemas.AnyTypeSchema
                        
                        def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                            return super().get_item_oapg(name)
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'properties':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "port_no": port_no,
                "hw_addr": hw_addr,
                "name": name,
                "config": config,
                "state": state,
                "curr": curr,
                "advertised": advertised,
                "supported": supported,
                "peer": peer,
                "curr_speed": curr_speed,
                "max_speed": max_speed,
                "length": length,
                "properties": properties,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["port_no"]) -> MetaOapg.properties.port_no: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hw_addr"]) -> MetaOapg.properties.hw_addr: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["config"]) -> MetaOapg.properties.config: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["curr"]) -> MetaOapg.properties.curr: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["advertised"]) -> MetaOapg.properties.advertised: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["supported"]) -> MetaOapg.properties.supported: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["peer"]) -> MetaOapg.properties.peer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["curr_speed"]) -> MetaOapg.properties.curr_speed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_speed"]) -> MetaOapg.properties.max_speed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["length"]) -> MetaOapg.properties.length: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["properties"]) -> MetaOapg.properties.properties: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["port_no", "hw_addr", "name", "config", "state", "curr", "advertised", "supported", "peer", "curr_speed", "max_speed", "length", "properties", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["port_no"]) -> typing.Union[MetaOapg.properties.port_no, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hw_addr"]) -> typing.Union[MetaOapg.properties.hw_addr, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["config"]) -> typing.Union[MetaOapg.properties.config, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["curr"]) -> typing.Union[MetaOapg.properties.curr, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["advertised"]) -> typing.Union[MetaOapg.properties.advertised, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["supported"]) -> typing.Union[MetaOapg.properties.supported, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["peer"]) -> typing.Union[MetaOapg.properties.peer, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["curr_speed"]) -> typing.Union[MetaOapg.properties.curr_speed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_speed"]) -> typing.Union[MetaOapg.properties.max_speed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["length"]) -> typing.Union[MetaOapg.properties.length, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["properties"]) -> typing.Union[MetaOapg.properties.properties, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["port_no", "hw_addr", "name", "config", "state", "curr", "advertised", "supported", "peer", "curr_speed", "max_speed", "length", "properties", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        port_no: typing.Union[MetaOapg.properties.port_no, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        hw_addr: typing.Union[MetaOapg.properties.hw_addr, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        config: typing.Union[MetaOapg.properties.config, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        state: typing.Union[MetaOapg.properties.state, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        curr: typing.Union[MetaOapg.properties.curr, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        advertised: typing.Union[MetaOapg.properties.advertised, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        supported: typing.Union[MetaOapg.properties.supported, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        peer: typing.Union[MetaOapg.properties.peer, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        curr_speed: typing.Union[MetaOapg.properties.curr_speed, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        max_speed: typing.Union[MetaOapg.properties.max_speed, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        length: typing.Union[MetaOapg.properties.length, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        properties: typing.Union[MetaOapg.properties.properties, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SwitchPortDescription':
        return super().__new__(
            cls,
            *_args,
            port_no=port_no,
            hw_addr=hw_addr,
            name=name,
            config=config,
            state=state,
            curr=curr,
            advertised=advertised,
            supported=supported,
            peer=peer,
            curr_speed=curr_speed,
            max_speed=max_speed,
            length=length,
            properties=properties,
            _configuration=_configuration,
            **kwargs,
        )
