# coding: utf-8

"""
    DSMF

    A simple API to interact with the Domain Slice Management Function. Supports reserving, creating and removing slices and tunnels from one external domain to another external domain or host. Please refer to the topology drawings for further information about the network structures.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from dsmf_client import schemas  # noqa: F401


class ConnectionConfiguration(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A connection configuration element
    """


    class MetaOapg:
        
        class properties:
            intf_name = schemas.StrSchema
            intf_id = schemas.IntSchema
            other_end = schemas.StrSchema
            __annotations__ = {
                "intf_name": intf_name,
                "intf_id": intf_id,
                "other_end": other_end,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["intf_name"]) -> MetaOapg.properties.intf_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["intf_id"]) -> MetaOapg.properties.intf_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["other_end"]) -> MetaOapg.properties.other_end: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["intf_name", "intf_id", "other_end", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["intf_name"]) -> typing.Union[MetaOapg.properties.intf_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["intf_id"]) -> typing.Union[MetaOapg.properties.intf_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["other_end"]) -> typing.Union[MetaOapg.properties.other_end, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["intf_name", "intf_id", "other_end", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        intf_name: typing.Union[MetaOapg.properties.intf_name, str, schemas.Unset] = schemas.unset,
        intf_id: typing.Union[MetaOapg.properties.intf_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        other_end: typing.Union[MetaOapg.properties.other_end, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ConnectionConfiguration':
        return super().__new__(
            cls,
            *_args,
            intf_name=intf_name,
            intf_id=intf_id,
            other_end=other_end,
            _configuration=_configuration,
            **kwargs,
        )
