# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from dsmf_server.models.base_model_ import Model
from dsmf_server.models.connection_configuration import ConnectionConfiguration
from dsmf_server import util


class DeviceConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ip: str='localhost', port: int=8082, connections: List[ConnectionConfiguration]=None, network: str=None, name: str=None, dpid: int=None):
        """DeviceConfiguration - a model defined in OpenAPI

        :param ip: The ip of this DeviceConfiguration.
        :param port: The port of this DeviceConfiguration.
        :param connections: The connections of this DeviceConfiguration.
        :param network: The network of this DeviceConfiguration.
        :param name: The name of this DeviceConfiguration.
        :param dpid: The dpid of this DeviceConfiguration.
        """
        self.openapi_types = {
            'ip': str,
            'port': int,
            'connections': List[ConnectionConfiguration],
            'network': str,
            'name': str,
            'dpid': int
        }

        self.attribute_map = {
            'ip': 'ip',
            'port': 'port',
            'connections': 'connections',
            'network': 'network',
            'name': 'name',
            'dpid': 'dpid'
        }

        self._ip = ip
        self._port = port
        self._connections = connections
        self._network = network
        self._name = name
        self._dpid = dpid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The device_configuration of this DeviceConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ip(self):
        """Gets the ip of this DeviceConfiguration.

        The ip or name the device can be reached on

        :return: The ip of this DeviceConfiguration.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this DeviceConfiguration.

        The ip or name the device can be reached on

        :param ip: The ip of this DeviceConfiguration.
        :type ip: str
        """

        self._ip = ip

    @property
    def port(self):
        """Gets the port of this DeviceConfiguration.

        The port that the device REST API can be reached on

        :return: The port of this DeviceConfiguration.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this DeviceConfiguration.

        The port that the device REST API can be reached on

        :param port: The port of this DeviceConfiguration.
        :type port: int
        """

        self._port = port

    @property
    def connections(self):
        """Gets the connections of this DeviceConfiguration.

        The (relevant) interface definitions for this device

        :return: The connections of this DeviceConfiguration.
        :rtype: List[ConnectionConfiguration]
        """
        return self._connections

    @connections.setter
    def connections(self, connections):
        """Sets the connections of this DeviceConfiguration.

        The (relevant) interface definitions for this device

        :param connections: The connections of this DeviceConfiguration.
        :type connections: List[ConnectionConfiguration]
        """

        self._connections = connections

    @property
    def network(self):
        """Gets the network of this DeviceConfiguration.

        The network name this device is assigned to

        :return: The network of this DeviceConfiguration.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this DeviceConfiguration.

        The network name this device is assigned to

        :param network: The network of this DeviceConfiguration.
        :type network: str
        """

        self._network = network

    @property
    def name(self):
        """Gets the name of this DeviceConfiguration.

        The name of the device

        :return: The name of this DeviceConfiguration.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DeviceConfiguration.

        The name of the device

        :param name: The name of this DeviceConfiguration.
        :type name: str
        """

        self._name = name

    @property
    def dpid(self):
        """Gets the dpid of this DeviceConfiguration.

        The datapath id in case this is a switch

        :return: The dpid of this DeviceConfiguration.
        :rtype: int
        """
        return self._dpid

    @dpid.setter
    def dpid(self, dpid):
        """Sets the dpid of this DeviceConfiguration.

        The datapath id in case this is a switch

        :param dpid: The dpid of this DeviceConfiguration.
        :type dpid: int
        """

        self._dpid = dpid
