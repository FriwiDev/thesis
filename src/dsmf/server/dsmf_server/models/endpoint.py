# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from dsmf_server.models.base_model_ import Model
from dsmf_server import util


class Endpoint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ip: str=None, port: int=0, name: str=None, network: str=None):
        """Endpoint - a model defined in OpenAPI

        :param ip: The ip of this Endpoint.
        :param port: The port of this Endpoint.
        :param name: The name of this Endpoint.
        :param network: The network of this Endpoint.
        """
        self.openapi_types = {
            'ip': str,
            'port': int,
            'name': str,
            'network': str
        }

        self.attribute_map = {
            'ip': 'ip',
            'port': 'port',
            'name': 'name',
            'network': 'network'
        }

        self._ip = ip
        self._port = port
        self._name = name
        self._network = network

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Endpoint':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The endpoint of this Endpoint.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ip(self):
        """Gets the ip of this Endpoint.

        Specifies the source or target ip to be matched. Leave empty for no matching.

        :return: The ip of this Endpoint.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this Endpoint.

        Specifies the source or target ip to be matched. Leave empty for no matching.

        :param ip: The ip of this Endpoint.
        :type ip: str
        """

        self._ip = ip

    @property
    def port(self):
        """Gets the port of this Endpoint.

        Specifies the source or target port to be matched. Leave empty or on 0 for no matching.

        :return: The port of this Endpoint.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this Endpoint.

        Specifies the source or target port to be matched. Leave empty or on 0 for no matching.

        :param port: The port of this Endpoint.
        :type port: int
        """

        self._port = port

    @property
    def name(self):
        """Gets the name of this Endpoint.

        Specifies the name of this entry to look up in our configuration.

        :return: The name of this Endpoint.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Endpoint.

        Specifies the name of this entry to look up in our configuration.

        :param name: The name of this Endpoint.
        :type name: str
        """

        self._name = name

    @property
    def network(self):
        """Gets the network of this Endpoint.

        Specifies the network name of this endpoint.

        :return: The network of this Endpoint.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this Endpoint.

        Specifies the network name of this endpoint.

        :param network: The network of this Endpoint.
        :type network: str
        """

        self._network = network
