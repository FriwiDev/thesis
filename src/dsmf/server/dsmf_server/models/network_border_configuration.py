# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from dsmf_server.models.base_model_ import Model
from dsmf_server.models.connection_configuration import ConnectionConfiguration
from dsmf_server import util


class NetworkBorderConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, network_name: str=None, device_name: str=None, device_type: str=None, connection: ConnectionConfiguration=None):
        """NetworkBorderConfiguration - a model defined in OpenAPI

        :param network_name: The network_name of this NetworkBorderConfiguration.
        :param device_name: The device_name of this NetworkBorderConfiguration.
        :param device_type: The device_type of this NetworkBorderConfiguration.
        :param connection: The connection of this NetworkBorderConfiguration.
        """
        self.openapi_types = {
            'network_name': str,
            'device_name': str,
            'device_type': str,
            'connection': ConnectionConfiguration
        }

        self.attribute_map = {
            'network_name': 'network_name',
            'device_name': 'device_name',
            'device_type': 'device_type',
            'connection': 'connection'
        }

        self._network_name = network_name
        self._device_name = device_name
        self._device_type = device_type
        self._connection = connection

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NetworkBorderConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The network_border_configuration of this NetworkBorderConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def network_name(self):
        """Gets the network_name of this NetworkBorderConfiguration.

        The network this border leads to

        :return: The network_name of this NetworkBorderConfiguration.
        :rtype: str
        """
        return self._network_name

    @network_name.setter
    def network_name(self, network_name):
        """Sets the network_name of this NetworkBorderConfiguration.

        The network this border leads to

        :param network_name: The network_name of this NetworkBorderConfiguration.
        :type network_name: str
        """

        self._network_name = network_name

    @property
    def device_name(self):
        """Gets the device_name of this NetworkBorderConfiguration.

        The name of the device that has a direct connection to the other network (our side)

        :return: The device_name of this NetworkBorderConfiguration.
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this NetworkBorderConfiguration.

        The name of the device that has a direct connection to the other network (our side)

        :param device_name: The device_name of this NetworkBorderConfiguration.
        :type device_name: str
        """

        self._device_name = device_name

    @property
    def device_type(self):
        """Gets the device_type of this NetworkBorderConfiguration.

        The type of the remote device

        :return: The device_type of this NetworkBorderConfiguration.
        :rtype: str
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this NetworkBorderConfiguration.

        The type of the remote device

        :param device_type: The device_type of this NetworkBorderConfiguration.
        :type device_type: str
        """
        allowed_values = ["SWITCH", "VPN", "HOST"]  # noqa: E501
        if device_type not in allowed_values:
            raise ValueError(
                "Invalid value for `device_type` ({0}), must be one of {1}"
                .format(device_type, allowed_values)
            )

        self._device_type = device_type

    @property
    def connection(self):
        """Gets the connection of this NetworkBorderConfiguration.


        :return: The connection of this NetworkBorderConfiguration.
        :rtype: ConnectionConfiguration
        """
        return self._connection

    @connection.setter
    def connection(self, connection):
        """Sets the connection of this NetworkBorderConfiguration.


        :param connection: The connection of this NetworkBorderConfiguration.
        :type connection: ConnectionConfiguration
        """

        self._connection = connection
