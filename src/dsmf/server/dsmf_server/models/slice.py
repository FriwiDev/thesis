# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from dsmf_server.models.base_model_ import Model
from dsmf_server.models.endpoint import Endpoint
from dsmf_server import util


class Slice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, slice_id: int=None, min_rate: int=None, max_rate: int=None, burst_rate: int=None, latency: int=None, tunnel_id: int=None, transport_protocol: str=None, fr: Endpoint=None, to: Endpoint=None):
        """Slice - a model defined in OpenAPI

        :param slice_id: The slice_id of this Slice.
        :param min_rate: The min_rate of this Slice.
        :param max_rate: The max_rate of this Slice.
        :param burst_rate: The burst_rate of this Slice.
        :param latency: The latency of this Slice.
        :param tunnel_id: The tunnel_id of this Slice.
        :param transport_protocol: The transport_protocol of this Slice.
        :param fr: The fr of this Slice.
        :param to: The to of this Slice.
        """
        self.openapi_types = {
            'slice_id': int,
            'min_rate': int,
            'max_rate': int,
            'burst_rate': int,
            'latency': int,
            'tunnel_id': int,
            'transport_protocol': str,
            'fr': Endpoint,
            'to': Endpoint
        }

        self.attribute_map = {
            'slice_id': 'slice_id',
            'min_rate': 'min_rate',
            'max_rate': 'max_rate',
            'burst_rate': 'burst_rate',
            'latency': 'latency',
            'tunnel_id': 'tunnel_id',
            'transport_protocol': 'transport_protocol',
            'fr': 'fr',
            'to': 'to'
        }

        self._slice_id = slice_id
        self._min_rate = min_rate
        self._max_rate = max_rate
        self._burst_rate = burst_rate
        self._latency = latency
        self._tunnel_id = tunnel_id
        self._transport_protocol = transport_protocol
        self._fr = fr
        self._to = to

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Slice':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The slice of this Slice.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def slice_id(self):
        """Gets the slice_id of this Slice.

        The slice identifier

        :return: The slice_id of this Slice.
        :rtype: int
        """
        return self._slice_id

    @slice_id.setter
    def slice_id(self, slice_id):
        """Sets the slice_id of this Slice.

        The slice identifier

        :param slice_id: The slice_id of this Slice.
        :type slice_id: int
        """

        self._slice_id = slice_id

    @property
    def min_rate(self):
        """Gets the min_rate of this Slice.

        The minimum transmission rate as bits/s

        :return: The min_rate of this Slice.
        :rtype: int
        """
        return self._min_rate

    @min_rate.setter
    def min_rate(self, min_rate):
        """Sets the min_rate of this Slice.

        The minimum transmission rate as bits/s

        :param min_rate: The min_rate of this Slice.
        :type min_rate: int
        """

        self._min_rate = min_rate

    @property
    def max_rate(self):
        """Gets the max_rate of this Slice.

        The maximum transmission rate as bits/s

        :return: The max_rate of this Slice.
        :rtype: int
        """
        return self._max_rate

    @max_rate.setter
    def max_rate(self, max_rate):
        """Sets the max_rate of this Slice.

        The maximum transmission rate as bits/s

        :param max_rate: The max_rate of this Slice.
        :type max_rate: int
        """

        self._max_rate = max_rate

    @property
    def burst_rate(self):
        """Gets the burst_rate of this Slice.

        The burst transmission rate as bits/s

        :return: The burst_rate of this Slice.
        :rtype: int
        """
        return self._burst_rate

    @burst_rate.setter
    def burst_rate(self, burst_rate):
        """Sets the burst_rate of this Slice.

        The burst transmission rate as bits/s

        :param burst_rate: The burst_rate of this Slice.
        :type burst_rate: int
        """

        self._burst_rate = burst_rate

    @property
    def latency(self):
        """Gets the latency of this Slice.

        The required maximum latency

        :return: The latency of this Slice.
        :rtype: int
        """
        return self._latency

    @latency.setter
    def latency(self, latency):
        """Sets the latency of this Slice.

        The required maximum latency

        :param latency: The latency of this Slice.
        :type latency: int
        """

        self._latency = latency

    @property
    def tunnel_id(self):
        """Gets the tunnel_id of this Slice.

        The tunnel identifier

        :return: The tunnel_id of this Slice.
        :rtype: int
        """
        return self._tunnel_id

    @tunnel_id.setter
    def tunnel_id(self, tunnel_id):
        """Sets the tunnel_id of this Slice.

        The tunnel identifier

        :param tunnel_id: The tunnel_id of this Slice.
        :type tunnel_id: int
        """

        self._tunnel_id = tunnel_id

    @property
    def transport_protocol(self):
        """Gets the transport_protocol of this Slice.

        The protocol to be expected

        :return: The transport_protocol of this Slice.
        :rtype: str
        """
        return self._transport_protocol

    @transport_protocol.setter
    def transport_protocol(self, transport_protocol):
        """Sets the transport_protocol of this Slice.

        The protocol to be expected

        :param transport_protocol: The transport_protocol of this Slice.
        :type transport_protocol: str
        """
        allowed_values = ["UDP", "TCP"]  # noqa: E501
        if transport_protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `transport_protocol` ({0}), must be one of {1}"
                .format(transport_protocol, allowed_values)
            )

        self._transport_protocol = transport_protocol

    @property
    def fr(self):
        """Gets the fr of this Slice.


        :return: The fr of this Slice.
        :rtype: Endpoint
        """
        return self._fr

    @fr.setter
    def fr(self, fr):
        """Sets the fr of this Slice.


        :param fr: The fr of this Slice.
        :type fr: Endpoint
        """

        self._fr = fr

    @property
    def to(self):
        """Gets the to of this Slice.


        :return: The to of this Slice.
        :rtype: Endpoint
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this Slice.


        :param to: The to of this Slice.
        :type to: Endpoint
        """

        self._to = to
