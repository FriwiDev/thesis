# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from dsmf_server.models.base_model_ import Model
from dsmf_server.models.endpoint import Endpoint
from dsmf_server import util


class Tunnel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, tunnel_id: int=None, min_rate: int=None, max_rate: int=None, burst_rate: int=None, latency: int=None, fr: Endpoint=None, to: Endpoint=None, private_key: str=None, public_key: str=None):
        """Tunnel - a model defined in OpenAPI

        :param tunnel_id: The tunnel_id of this Tunnel.
        :param min_rate: The min_rate of this Tunnel.
        :param max_rate: The max_rate of this Tunnel.
        :param burst_rate: The burst_rate of this Tunnel.
        :param latency: The latency of this Tunnel.
        :param fr: The fr of this Tunnel.
        :param to: The to of this Tunnel.
        :param private_key: The private_key of this Tunnel.
        :param public_key: The public_key of this Tunnel.
        """
        self.openapi_types = {
            'tunnel_id': int,
            'min_rate': int,
            'max_rate': int,
            'burst_rate': int,
            'latency': int,
            'fr': Endpoint,
            'to': Endpoint,
            'private_key': str,
            'public_key': str
        }

        self.attribute_map = {
            'tunnel_id': 'tunnel_id',
            'min_rate': 'min_rate',
            'max_rate': 'max_rate',
            'burst_rate': 'burst_rate',
            'latency': 'latency',
            'fr': 'fr',
            'to': 'to',
            'private_key': 'private_key',
            'public_key': 'public_key'
        }

        self._tunnel_id = tunnel_id
        self._min_rate = min_rate
        self._max_rate = max_rate
        self._burst_rate = burst_rate
        self._latency = latency
        self._fr = fr
        self._to = to
        self._private_key = private_key
        self._public_key = public_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Tunnel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The tunnel of this Tunnel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def tunnel_id(self):
        """Gets the tunnel_id of this Tunnel.

        The tunnel identifier

        :return: The tunnel_id of this Tunnel.
        :rtype: int
        """
        return self._tunnel_id

    @tunnel_id.setter
    def tunnel_id(self, tunnel_id):
        """Sets the tunnel_id of this Tunnel.

        The tunnel identifier

        :param tunnel_id: The tunnel_id of this Tunnel.
        :type tunnel_id: int
        """

        self._tunnel_id = tunnel_id

    @property
    def min_rate(self):
        """Gets the min_rate of this Tunnel.

        The minimum transmission rate as bits/s

        :return: The min_rate of this Tunnel.
        :rtype: int
        """
        return self._min_rate

    @min_rate.setter
    def min_rate(self, min_rate):
        """Sets the min_rate of this Tunnel.

        The minimum transmission rate as bits/s

        :param min_rate: The min_rate of this Tunnel.
        :type min_rate: int
        """

        self._min_rate = min_rate

    @property
    def max_rate(self):
        """Gets the max_rate of this Tunnel.

        The maximum transmission rate as bits/s

        :return: The max_rate of this Tunnel.
        :rtype: int
        """
        return self._max_rate

    @max_rate.setter
    def max_rate(self, max_rate):
        """Sets the max_rate of this Tunnel.

        The maximum transmission rate as bits/s

        :param max_rate: The max_rate of this Tunnel.
        :type max_rate: int
        """

        self._max_rate = max_rate

    @property
    def burst_rate(self):
        """Gets the burst_rate of this Tunnel.

        The burst transmission rate as bits/s

        :return: The burst_rate of this Tunnel.
        :rtype: int
        """
        return self._burst_rate

    @burst_rate.setter
    def burst_rate(self, burst_rate):
        """Sets the burst_rate of this Tunnel.

        The burst transmission rate as bits/s

        :param burst_rate: The burst_rate of this Tunnel.
        :type burst_rate: int
        """

        self._burst_rate = burst_rate

    @property
    def latency(self):
        """Gets the latency of this Tunnel.

        The required maximum latency

        :return: The latency of this Tunnel.
        :rtype: int
        """
        return self._latency

    @latency.setter
    def latency(self, latency):
        """Sets the latency of this Tunnel.

        The required maximum latency

        :param latency: The latency of this Tunnel.
        :type latency: int
        """

        self._latency = latency

    @property
    def fr(self):
        """Gets the fr of this Tunnel.


        :return: The fr of this Tunnel.
        :rtype: Endpoint
        """
        return self._fr

    @fr.setter
    def fr(self, fr):
        """Sets the fr of this Tunnel.


        :param fr: The fr of this Tunnel.
        :type fr: Endpoint
        """

        self._fr = fr

    @property
    def to(self):
        """Gets the to of this Tunnel.


        :return: The to of this Tunnel.
        :rtype: Endpoint
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this Tunnel.


        :param to: The to of this Tunnel.
        :type to: Endpoint
        """

        self._to = to

    @property
    def private_key(self):
        """Gets the private_key of this Tunnel.

        The tunnel private key

        :return: The private_key of this Tunnel.
        :rtype: str
        """
        return self._private_key

    @private_key.setter
    def private_key(self, private_key):
        """Sets the private_key of this Tunnel.

        The tunnel private key

        :param private_key: The private_key of this Tunnel.
        :type private_key: str
        """

        self._private_key = private_key

    @property
    def public_key(self):
        """Gets the public_key of this Tunnel.

        The tunnel public key (of the other side)

        :return: The public_key of this Tunnel.
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this Tunnel.

        The tunnel public key (of the other side)

        :param public_key: The public_key of this Tunnel.
        :type public_key: str
        """

        self._public_key = public_key
