# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from esmf_server.models.base_model_ import Model
from esmf_server import util


class Slice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, min_rate: int=None, max_rate: int=None, burst_rate: int=None, latency: int=None, _from: str=None, to: str=None):
        """Slice - a model defined in OpenAPI

        :param id: The id of this Slice.
        :param min_rate: The min_rate of this Slice.
        :param max_rate: The max_rate of this Slice.
        :param burst_rate: The burst_rate of this Slice.
        :param latency: The latency of this Slice.
        :param _from: The _from of this Slice.
        :param to: The to of this Slice.
        """
        self.openapi_types = {
            'id': int,
            'min_rate': int,
            'max_rate': int,
            'burst_rate': int,
            'latency': int,
            '_from': str,
            'to': str
        }

        self.attribute_map = {
            'id': 'id',
            'min_rate': 'min_rate',
            'max_rate': 'max_rate',
            'burst_rate': 'burst_rate',
            'latency': 'latency',
            '_from': 'from',
            'to': 'to'
        }

        self._id = id
        self._min_rate = min_rate
        self._max_rate = max_rate
        self._burst_rate = burst_rate
        self._latency = latency
        self.__from = _from
        self._to = to

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Slice':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The slice of this Slice.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Slice.

        The slice identifier

        :return: The id of this Slice.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Slice.

        The slice identifier

        :param id: The id of this Slice.
        :type id: int
        """

        self._id = id

    @property
    def min_rate(self):
        """Gets the min_rate of this Slice.

        The minimum transmission rate as bits/s

        :return: The min_rate of this Slice.
        :rtype: int
        """
        return self._min_rate

    @min_rate.setter
    def min_rate(self, min_rate):
        """Sets the min_rate of this Slice.

        The minimum transmission rate as bits/s

        :param min_rate: The min_rate of this Slice.
        :type min_rate: int
        """

        self._min_rate = min_rate

    @property
    def max_rate(self):
        """Gets the max_rate of this Slice.

        The maximum transmission rate as bits/s

        :return: The max_rate of this Slice.
        :rtype: int
        """
        return self._max_rate

    @max_rate.setter
    def max_rate(self, max_rate):
        """Sets the max_rate of this Slice.

        The maximum transmission rate as bits/s

        :param max_rate: The max_rate of this Slice.
        :type max_rate: int
        """

        self._max_rate = max_rate

    @property
    def burst_rate(self):
        """Gets the burst_rate of this Slice.

        The burst transmission rate as bits/s

        :return: The burst_rate of this Slice.
        :rtype: int
        """
        return self._burst_rate

    @burst_rate.setter
    def burst_rate(self, burst_rate):
        """Sets the burst_rate of this Slice.

        The burst transmission rate as bits/s

        :param burst_rate: The burst_rate of this Slice.
        :type burst_rate: int
        """

        self._burst_rate = burst_rate

    @property
    def latency(self):
        """Gets the latency of this Slice.

        The required maximum latency

        :return: The latency of this Slice.
        :rtype: int
        """
        return self._latency

    @latency.setter
    def latency(self, latency):
        """Sets the latency of this Slice.

        The required maximum latency

        :param latency: The latency of this Slice.
        :type latency: int
        """

        self._latency = latency

    @property
    def _from(self):
        """Gets the _from of this Slice.

        The name of the input domain or host

        :return: The _from of this Slice.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this Slice.

        The name of the input domain or host

        :param _from: The _from of this Slice.
        :type _from: str
        """

        self.__from = _from

    @property
    def to(self):
        """Gets the to of this Slice.

        The name of the output domain or host

        :return: The to of this Slice.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this Slice.

        The name of the output domain or host

        :param to: The to of this Slice.
        :type to: str
        """

        self._to = to
