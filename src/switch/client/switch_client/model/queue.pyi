# coding: utf-8

"""
    Switch QoS API

    A simple API to manage QoS queues on arbitrary OpenFlow switches. Does not support listing queues (GET) because this is already part of OpenFlow.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import uuid  # noqa: F401
from datetime import date, datetime  # noqa: F401

import frozendict  # noqa: F401
import typing_extensions  # noqa: F401
from switch_client import schemas  # noqa: F401


class Queue(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        class properties:
            id = schemas.Int32Schema
            rate = schemas.Int64Schema
            port = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "rate": rate,
                "port": port,
            }

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rate"]) -> MetaOapg.properties.rate: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["port"]) -> MetaOapg.properties.port: ...

    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...

    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "rate", "port",], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[
        MetaOapg.properties.id, schemas.Unset]: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rate"]) -> typing.Union[
        MetaOapg.properties.rate, schemas.Unset]: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["port"]) -> typing.Union[
        MetaOapg.properties.port, schemas.Unset]: ...

    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...

    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "rate", "port",], str]):
        return super().get_item_oapg(name)

    def __new__(
            cls,
            *_args: typing.Union[dict, frozendict.frozendict,],
            id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
            rate: typing.Union[MetaOapg.properties.rate, decimal.Decimal, int, schemas.Unset] = schemas.unset,
            port: typing.Union[MetaOapg.properties.port, str, schemas.Unset] = schemas.unset,
            _configuration: typing.Optional[schemas.Configuration] = None,
            **kwargs: typing.Union[
                schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Queue':
        return super().__new__(
            cls,
            *_args,
            id=id,
            rate=rate,
            port=port,
            _configuration=_configuration,
            **kwargs,
        )
