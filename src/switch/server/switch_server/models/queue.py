# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from switch_server.models.base_model_ import Model
from switch_server import util


class Queue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, min_rate: int=None, max_rate: int=None, burst_rate: int=None, port: str=None):
        """Queue - a model defined in OpenAPI

        :param id: The id of this Queue.
        :param min_rate: The min_rate of this Queue.
        :param max_rate: The max_rate of this Queue.
        :param burst_rate: The burst_rate of this Queue.
        :param port: The port of this Queue.
        """
        self.openapi_types = {
            'id': int,
            'min_rate': int,
            'max_rate': int,
            'burst_rate': int,
            'port': str
        }

        self.attribute_map = {
            'id': 'id',
            'min_rate': 'min_rate',
            'max_rate': 'max_rate',
            'burst_rate': 'burst_rate',
            'port': 'port'
        }

        self._id = id
        self._min_rate = min_rate
        self._max_rate = max_rate
        self._burst_rate = burst_rate
        self._port = port

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Queue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The queue of this Queue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Queue.

        The queue identifier used by OpenFlow

        :return: The id of this Queue.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Queue.

        The queue identifier used by OpenFlow

        :param id: The id of this Queue.
        :type id: int
        """

        self._id = id

    @property
    def min_rate(self):
        """Gets the min_rate of this Queue.

        The minimum queue rate in Bits/s

        :return: The min_rate of this Queue.
        :rtype: int
        """
        return self._min_rate

    @min_rate.setter
    def min_rate(self, min_rate):
        """Sets the min_rate of this Queue.

        The minimum queue rate in Bits/s

        :param min_rate: The min_rate of this Queue.
        :type min_rate: int
        """

        self._min_rate = min_rate

    @property
    def max_rate(self):
        """Gets the max_rate of this Queue.

        The maximum queue rate in Bits/s

        :return: The max_rate of this Queue.
        :rtype: int
        """
        return self._max_rate

    @max_rate.setter
    def max_rate(self, max_rate):
        """Sets the max_rate of this Queue.

        The maximum queue rate in Bits/s

        :param max_rate: The max_rate of this Queue.
        :type max_rate: int
        """

        self._max_rate = max_rate

    @property
    def burst_rate(self):
        """Gets the burst_rate of this Queue.

        The burst queue rate in Bits/s

        :return: The burst_rate of this Queue.
        :rtype: int
        """
        return self._burst_rate

    @burst_rate.setter
    def burst_rate(self, burst_rate):
        """Sets the burst_rate of this Queue.

        The burst queue rate in Bits/s

        :param burst_rate: The burst_rate of this Queue.
        :type burst_rate: int
        """

        self._burst_rate = burst_rate

    @property
    def port(self):
        """Gets the port of this Queue.

        The name of the output port on the switch

        :return: The port of this Queue.
        :rtype: str
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this Queue.

        The name of the output port on the switch

        :param port: The port of this Queue.
        :type port: str
        """

        self._port = port
