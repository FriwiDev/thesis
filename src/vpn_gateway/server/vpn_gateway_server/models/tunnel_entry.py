# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from vpn_gateway_server.models.base_model_ import Model
from vpn_gateway_server.models.tunnel_entry_egress_matches_inner import TunnelEntryEgressMatchesInner
from vpn_gateway_server.models.tunnel_entry_ingress_matches_inner import TunnelEntryIngressMatchesInner
from vpn_gateway_server import util


class TunnelEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, tunnel_entry_id: int=None, inner_subnet: str=None, local_port: int=None, remote_end: str=None, private_key: str=None, public_key: str=None, local_tunnel_ip: str=None, remote_tunnel_ip: str=None, ingress_matches: List[TunnelEntryIngressMatchesInner]=None, egress_matches: List[TunnelEntryEgressMatchesInner]=None):
        """TunnelEntry - a model defined in OpenAPI

        :param tunnel_entry_id: The tunnel_entry_id of this TunnelEntry.
        :param inner_subnet: The inner_subnet of this TunnelEntry.
        :param local_port: The local_port of this TunnelEntry.
        :param remote_end: The remote_end of this TunnelEntry.
        :param private_key: The private_key of this TunnelEntry.
        :param public_key: The public_key of this TunnelEntry.
        :param local_tunnel_ip: The local_tunnel_ip of this TunnelEntry.
        :param remote_tunnel_ip: The remote_tunnel_ip of this TunnelEntry.
        :param ingress_matches: The ingress_matches of this TunnelEntry.
        :param egress_matches: The egress_matches of this TunnelEntry.
        """
        self.openapi_types = {
            'tunnel_entry_id': int,
            'inner_subnet': str,
            'local_port': int,
            'remote_end': str,
            'private_key': str,
            'public_key': str,
            'local_tunnel_ip': str,
            'remote_tunnel_ip': str,
            'ingress_matches': List[TunnelEntryIngressMatchesInner],
            'egress_matches': List[TunnelEntryEgressMatchesInner]
        }

        self.attribute_map = {
            'tunnel_entry_id': 'tunnel_entry_id',
            'inner_subnet': 'inner_subnet',
            'local_port': 'local_port',
            'remote_end': 'remote_end',
            'private_key': 'private_key',
            'public_key': 'public_key',
            'local_tunnel_ip': 'local_tunnel_ip',
            'remote_tunnel_ip': 'remote_tunnel_ip',
            'ingress_matches': 'ingress_matches',
            'egress_matches': 'egress_matches'
        }

        self._tunnel_entry_id = tunnel_entry_id
        self._inner_subnet = inner_subnet
        self._local_port = local_port
        self._remote_end = remote_end
        self._private_key = private_key
        self._public_key = public_key
        self._local_tunnel_ip = local_tunnel_ip
        self._remote_tunnel_ip = remote_tunnel_ip
        self._ingress_matches = ingress_matches
        self._egress_matches = egress_matches

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TunnelEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The tunnel_entry of this TunnelEntry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def tunnel_entry_id(self):
        """Gets the tunnel_entry_id of this TunnelEntry.

        The tunnel identifier

        :return: The tunnel_entry_id of this TunnelEntry.
        :rtype: int
        """
        return self._tunnel_entry_id

    @tunnel_entry_id.setter
    def tunnel_entry_id(self, tunnel_entry_id):
        """Sets the tunnel_entry_id of this TunnelEntry.

        The tunnel identifier

        :param tunnel_entry_id: The tunnel_entry_id of this TunnelEntry.
        :type tunnel_entry_id: int
        """

        self._tunnel_entry_id = tunnel_entry_id

    @property
    def inner_subnet(self):
        """Gets the inner_subnet of this TunnelEntry.

        The subnet to route towards the inner interface (aka. the edge network/device)

        :return: The inner_subnet of this TunnelEntry.
        :rtype: str
        """
        return self._inner_subnet

    @inner_subnet.setter
    def inner_subnet(self, inner_subnet):
        """Sets the inner_subnet of this TunnelEntry.

        The subnet to route towards the inner interface (aka. the edge network/device)

        :param inner_subnet: The inner_subnet of this TunnelEntry.
        :type inner_subnet: str
        """

        self._inner_subnet = inner_subnet

    @property
    def local_port(self):
        """Gets the local_port of this TunnelEntry.

        The local port to use to bind the tunnel

        :return: The local_port of this TunnelEntry.
        :rtype: int
        """
        return self._local_port

    @local_port.setter
    def local_port(self, local_port):
        """Sets the local_port of this TunnelEntry.

        The local port to use to bind the tunnel

        :param local_port: The local_port of this TunnelEntry.
        :type local_port: int
        """

        self._local_port = local_port

    @property
    def remote_end(self):
        """Gets the remote_end of this TunnelEntry.

        The remote address to contact as the other side of the tunnel

        :return: The remote_end of this TunnelEntry.
        :rtype: str
        """
        return self._remote_end

    @remote_end.setter
    def remote_end(self, remote_end):
        """Sets the remote_end of this TunnelEntry.

        The remote address to contact as the other side of the tunnel

        :param remote_end: The remote_end of this TunnelEntry.
        :type remote_end: str
        """

        self._remote_end = remote_end

    @property
    def private_key(self):
        """Gets the private_key of this TunnelEntry.

        The private key to use for authentication of the tunnel to the other side

        :return: The private_key of this TunnelEntry.
        :rtype: str
        """
        return self._private_key

    @private_key.setter
    def private_key(self, private_key):
        """Sets the private_key of this TunnelEntry.

        The private key to use for authentication of the tunnel to the other side

        :param private_key: The private_key of this TunnelEntry.
        :type private_key: str
        """

        self._private_key = private_key

    @property
    def public_key(self):
        """Gets the public_key of this TunnelEntry.

        The public key to use for authentication of the tunnel from the other side

        :return: The public_key of this TunnelEntry.
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this TunnelEntry.

        The public key to use for authentication of the tunnel from the other side

        :param public_key: The public_key of this TunnelEntry.
        :type public_key: str
        """

        self._public_key = public_key

    @property
    def local_tunnel_ip(self):
        """Gets the local_tunnel_ip of this TunnelEntry.

        The ip of the local wireguard tunnel end device

        :return: The local_tunnel_ip of this TunnelEntry.
        :rtype: str
        """
        return self._local_tunnel_ip

    @local_tunnel_ip.setter
    def local_tunnel_ip(self, local_tunnel_ip):
        """Sets the local_tunnel_ip of this TunnelEntry.

        The ip of the local wireguard tunnel end device

        :param local_tunnel_ip: The local_tunnel_ip of this TunnelEntry.
        :type local_tunnel_ip: str
        """

        self._local_tunnel_ip = local_tunnel_ip

    @property
    def remote_tunnel_ip(self):
        """Gets the remote_tunnel_ip of this TunnelEntry.

        The ip of the remote wireguard tunnel end device

        :return: The remote_tunnel_ip of this TunnelEntry.
        :rtype: str
        """
        return self._remote_tunnel_ip

    @remote_tunnel_ip.setter
    def remote_tunnel_ip(self, remote_tunnel_ip):
        """Sets the remote_tunnel_ip of this TunnelEntry.

        The ip of the remote wireguard tunnel end device

        :param remote_tunnel_ip: The remote_tunnel_ip of this TunnelEntry.
        :type remote_tunnel_ip: str
        """

        self._remote_tunnel_ip = remote_tunnel_ip

    @property
    def ingress_matches(self):
        """Gets the ingress_matches of this TunnelEntry.

        A specification for which mpls labels (slice ids) to match, alongside their expected ingress port

        :return: The ingress_matches of this TunnelEntry.
        :rtype: List[TunnelEntryIngressMatchesInner]
        """
        return self._ingress_matches

    @ingress_matches.setter
    def ingress_matches(self, ingress_matches):
        """Sets the ingress_matches of this TunnelEntry.

        A specification for which mpls labels (slice ids) to match, alongside their expected ingress port

        :param ingress_matches: The ingress_matches of this TunnelEntry.
        :type ingress_matches: List[TunnelEntryIngressMatchesInner]
        """

        self._ingress_matches = ingress_matches

    @property
    def egress_matches(self):
        """Gets the egress_matches of this TunnelEntry.

        A specification for which mpls labels (slice ids) to match, alongside their supposed egress port

        :return: The egress_matches of this TunnelEntry.
        :rtype: List[TunnelEntryEgressMatchesInner]
        """
        return self._egress_matches

    @egress_matches.setter
    def egress_matches(self, egress_matches):
        """Sets the egress_matches of this TunnelEntry.

        A specification for which mpls labels (slice ids) to match, alongside their supposed egress port

        :param egress_matches: The egress_matches of this TunnelEntry.
        :type egress_matches: List[TunnelEntryEgressMatchesInner]
        """

        self._egress_matches = egress_matches
