# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from vpn_gateway_server.models.base_model_ import Model
from vpn_gateway_server import util


class TunnelEntryMatchesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, transport_protocol: str=None, source_ip: str=None, target_ip: str=None, source_mac: str=None, source_port: int=0, target_port: int=0):
        """TunnelEntryMatchesInner - a model defined in OpenAPI

        :param transport_protocol: The transport_protocol of this TunnelEntryMatchesInner.
        :param source_ip: The source_ip of this TunnelEntryMatchesInner.
        :param target_ip: The target_ip of this TunnelEntryMatchesInner.
        :param source_mac: The source_mac of this TunnelEntryMatchesInner.
        :param source_port: The source_port of this TunnelEntryMatchesInner.
        :param target_port: The target_port of this TunnelEntryMatchesInner.
        """
        self.openapi_types = {
            'transport_protocol': str,
            'source_ip': str,
            'target_ip': str,
            'source_mac': str,
            'source_port': int,
            'target_port': int
        }

        self.attribute_map = {
            'transport_protocol': 'transport_protocol',
            'source_ip': 'source_ip',
            'target_ip': 'target_ip',
            'source_mac': 'source_mac',
            'source_port': 'source_port',
            'target_port': 'target_port'
        }

        self._transport_protocol = transport_protocol
        self._source_ip = source_ip
        self._target_ip = target_ip
        self._source_mac = source_mac
        self._source_port = source_port
        self._target_port = target_port

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TunnelEntryMatchesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The tunnel_entry_matches_inner of this TunnelEntryMatchesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def transport_protocol(self):
        """Gets the transport_protocol of this TunnelEntryMatchesInner.

        The protocol to be expected

        :return: The transport_protocol of this TunnelEntryMatchesInner.
        :rtype: str
        """
        return self._transport_protocol

    @transport_protocol.setter
    def transport_protocol(self, transport_protocol):
        """Sets the transport_protocol of this TunnelEntryMatchesInner.

        The protocol to be expected

        :param transport_protocol: The transport_protocol of this TunnelEntryMatchesInner.
        :type transport_protocol: str
        """
        allowed_values = ["UDP", "TCP"]  # noqa: E501
        if transport_protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `transport_protocol` ({0}), must be one of {1}"
                .format(transport_protocol, allowed_values)
            )

        self._transport_protocol = transport_protocol

    @property
    def source_ip(self):
        """Gets the source_ip of this TunnelEntryMatchesInner.

        Specifies the source ip to be matched. Leave empty for no matching.

        :return: The source_ip of this TunnelEntryMatchesInner.
        :rtype: str
        """
        return self._source_ip

    @source_ip.setter
    def source_ip(self, source_ip):
        """Sets the source_ip of this TunnelEntryMatchesInner.

        Specifies the source ip to be matched. Leave empty for no matching.

        :param source_ip: The source_ip of this TunnelEntryMatchesInner.
        :type source_ip: str
        """

        self._source_ip = source_ip

    @property
    def target_ip(self):
        """Gets the target_ip of this TunnelEntryMatchesInner.

        Specifies the target ip to be matched. Leave empty for no matching.

        :return: The target_ip of this TunnelEntryMatchesInner.
        :rtype: str
        """
        return self._target_ip

    @target_ip.setter
    def target_ip(self, target_ip):
        """Sets the target_ip of this TunnelEntryMatchesInner.

        Specifies the target ip to be matched. Leave empty for no matching.

        :param target_ip: The target_ip of this TunnelEntryMatchesInner.
        :type target_ip: str
        """

        self._target_ip = target_ip

    @property
    def source_mac(self):
        """Gets the source_mac of this TunnelEntryMatchesInner.

        Specifies the source mac to be matched. Leave empty for no matching.

        :return: The source_mac of this TunnelEntryMatchesInner.
        :rtype: str
        """
        return self._source_mac

    @source_mac.setter
    def source_mac(self, source_mac):
        """Sets the source_mac of this TunnelEntryMatchesInner.

        Specifies the source mac to be matched. Leave empty for no matching.

        :param source_mac: The source_mac of this TunnelEntryMatchesInner.
        :type source_mac: str
        """

        self._source_mac = source_mac

    @property
    def source_port(self):
        """Gets the source_port of this TunnelEntryMatchesInner.

        Specifies the source port to be matched. Leave empty or on 0 for no matching.

        :return: The source_port of this TunnelEntryMatchesInner.
        :rtype: int
        """
        return self._source_port

    @source_port.setter
    def source_port(self, source_port):
        """Sets the source_port of this TunnelEntryMatchesInner.

        Specifies the source port to be matched. Leave empty or on 0 for no matching.

        :param source_port: The source_port of this TunnelEntryMatchesInner.
        :type source_port: int
        """

        self._source_port = source_port

    @property
    def target_port(self):
        """Gets the target_port of this TunnelEntryMatchesInner.

        Specifies the target port to be matched. Leave empty or on 0 for no matching.

        :return: The target_port of this TunnelEntryMatchesInner.
        :rtype: int
        """
        return self._target_port

    @target_port.setter
    def target_port(self, target_port):
        """Sets the target_port of this TunnelEntryMatchesInner.

        Specifies the target port to be matched. Leave empty or on 0 for no matching.

        :param target_port: The target_port of this TunnelEntryMatchesInner.
        :type target_port: int
        """

        self._target_port = target_port
